# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference # NodeJS App + Docker + ECR + ECS

# Version 2.1 with ORBS for AWS ECR | ECS and DOCKER - now-Site

version: 2.1

# ORBS

orbs:
  aws-ecr: circleci/aws-ecr@6.15.3
  aws-ecs: circleci/aws-ecs@2.1.0

# JOBS

jobs:
  ecr-buildandpush-dockerimage:
    environment:
      APP_KEY=now-site
      APP_STUBBED=true
    machine:
      image: ubuntu-1604:202010-01
    working_directory: ~/now-site
    steps:

# Set ENV Vars to use with ECR/DOCKER - Verify CircleCI Task
      - run:
          name: Set Env Vars - env_type | branch_name | now-site
          command: |
                if [ $CIRCLE_BRANCH == master ]; then
                  BRANCH_NAME=$CIRCLE_BRANCH.$CIRCLE_BUILD_NUM;
                  echo "export BRANCH_NAME=$BRANCH_NAME" >> $BASH_ENV;
                  echo "export SERVICE_NAME=sit-master-now-site" >> $BASH_ENV;
                  echo "export TASKDEF_JSON_FILENAME=sit-master-task-def.json" >> $BASH_ENV;
                fi
                if [ $CIRCLE_BRANCH != master ]; then
                  BRANCH_NAME=$(echo $CIRCLE_BRANCH | sed -e 's/\//-/g').$CIRCLE_BUILD_NUM;
                  echo "export BRANCH_NAME=$BRANCH_NAME" >> $BASH_ENV;
                  echo "export SERVICE_NAME=sit-branch-now-site" >> $BASH_ENV;
                  echo "export TASKDEF_JSON_FILENAME=sit-branch-task-def.json" >> $BASH_ENV;
                fi
# Print ENV Vars - Verify CircleCI ENV
      - run:
          name: Print Env Vars - Verify | now-site
          command: |
                echo "CCI_BRANCH_NAME=$BRANCH_NAME";
                echo "CCI_SERVICE_NAME=$SERVICE_NAME";
                echo "CCI_TASKDEF_JSON_FILENAME=$TASKDEF_JSON_FILENAME";
# Code Checkout - CCI_Build
      - checkout

# Prepare the VM for NodeJS App Build
      - run:
          name: "Install | NVM | NPM | NODE_JS"
          command: |
                echo -e "\n\n\n ### UBUNTU_16.04 | NVM | NPM | NODE_JS "
                cd src; pwd;
                echo -e "\n ### Install NVM (Node Version Manager) - Installer for NodeJS + NPM "
                curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
                source ~/.profile
                nvm install v10.19.0
                echo -e "\n ### Setting Default NVM "
                nvm use v10.19.0;
                echo -e "\n ### Setting NPM Registry as BXM "
                npm set @bxm:registry http://npm.digital.bauer-media.net.au
                npm install
                npm rebuild node-sass --force
                npm run test:ci
                NODE_ENV=production npm run build
                echo -e "\n ### Print Version Information "
                echo -e "\n ### NVM Version  : $(nvm --version)"
                echo -e "\n ### NPM Version  : $(npm --version)"
                echo -e "\n ### Node Version : $(node --version)"
# AWS ECR Integration: Build and Push Docker Image to ECR
      - aws-ecr/build-and-push-image:
          checkout: false  # Checkout already done in previous step
          aws-access-key-id: ECR_AWS_ACCESS_KEY_ID
          aws-secret-access-key: ECR_AWS_SECRET_ACCESS_KEY
          account-url: AWS_ECR_ACCOUNT_URL
          region: AWS_DEFAULT_REGION
          profile-name: profile
          repo: cci-now-site
          create-repo: true
          repo-scan-on-push: false
          dockerfile: Dockerfile
          no-output-timeout: 9m
          tag: '$BRANCH_NAME,latest'

# AWS ECS Integration: Create a task definition using JSON: path-to/json-file.json
      - aws-ecs/update-task-definition-from-json:
          task-definition-json: $TASKDEF_JSON_FILENAME

# AWS ECS Integration: [ Cluster | Service | Task | PullImage-ECR | Deploy-NodeJS-APP ]
#      - aws-ecs/update-service:
#          cluster-name: arn:aws:ecs:ap-southeast-2:014901580825:cluster/cci-app-ecs
#          service-name: $SERVICE_NAME
#          family: sit-master-now-site
#          container-image-name-updates: "container=now-site-master-img,tag=$BRANCH_NAME"
#          skip-task-definition-registration: false # Don't Skip
#          force-new-deployment: true
#          verify-revision-is-deployed: true
#          verification-timeout: 9m
#          max-poll-attempts: 10
#          poll-interval: 120

# WORKFLOWS

workflows:
  version: 2
  now-site-build:
    jobs:
      - ecr-buildandpush-dockerimage:
          filters:
            branches:
              only:
                - circleci-project-setup
                - master
                - /fix.*/
                - /feature.*/
                - /dependabot.*/
              ignore:
                - main


### END ###

#          echo -e "\n ### This is pipeline ID << pipeline.id >> # << pipeline.git.branch >>"
#          echo -e "\n ### This is pipeline ID << pipeline.id >> # << pipeline.git.branch >>"
#          source ~/.profile
#          tag: 'latest,$CIRCLE_BRANCH-$CIRCLE_BUILD_NUM'
#          echo -e "\n\n\n ### CCI_BRANCHNAME: $CCI_BRANCH_NAME"
